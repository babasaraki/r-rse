[["index.html", "Merely Useful: Using R for Research Software Engineering Chapter 1 Welcome to the course webpage! 1.1 Re-use and licensing 1.2 Target audience of book 1.3 Instructional design 1.4 Acknowledgments", " Merely Useful: Using R for Research Software Engineering Kate Hertweck, Damien Irving, Luke Johnston, Madeleine Bonsma-Fisher, Joel Ostblom, Charlotte Wickham, Ian Flores Siaca, and Greg Wilson 2021-01-14 Chapter 1 Welcome to the course webpage! It’s still magic even if you know how it’s done. — Terry Pratchett TODO: Fill in this with a brief description on what course does, why its important, etc Computers are now as essential for research as telescopes, test tubes, and libraries, which means that researchers need need to know how to build, use, and share software. However, most introductions to programming focus on developing commercial applications, not on exploring problems and answering questions. This series of books will show you how to do the latter both on your own and as part of a team. The prequels to this book introduce three core skills: how to write short programs to clean and analyze data in a reproducible way, how to keep track of what you have done, and how to share your software and your results with other people. But just as some astronomers spend their careers designing telescopes, some researchers focus on building software to make their colleagues’ lives easier. People who do this are called research software engineers, and the aim of this book is to get you ready for this role—to help you go from writing code for your own use to creating tools to help your entire field advance. TODO: Update section? Needs revision. For researchers and data scientists who can write functions to create programs that are several pages long, and who want to be more productive and have more confidence in their results, this book provides a pragmatic, tools-based introduction to research software engineering. Unlike material courses aimed at computer scientists and professional software developers, this book uses data analysis as a motivating example and assumes that the learner’s ultimate goal is to answer questions rather than ship products. The course material was created using rmarkdown to write the lessons, bookdown to create the book format, GitHub to host the Git repository of the material, and GitHub Actions to create the website. The original source material for this course is found on the r-rse GitHub repository. 1.1 Re-use and licensing All of this material can be freely re-used under the terms of the Creative Commons Attribution 4.0 International License and the course code is licensed under a MIT License, so the material can be used, re-used, and modified, as long as there is attribution to this source. 1.2 Target audience of book TODO: Who is this book targeted towards? and why? and how can each use it. 1.3 Instructional design 1.4 Acknowledgments This book owes its existence to everyone we met through the Carpentries. We are also grateful to Insight Data Science for sponsoring the early stages of this work and to everyone who has contributed, particularly Jonathan Dursi and the authors of (Noble, 2009; Haddock and Dunn, 2010; Wilson et al., 2014, 2017; Scopatz and Huff, 2015; Taschuk and Wilson, 2017; Brown and Wilson, 2018; Devenyi et al., 2018; Sholler et al., 2019; Wilson, 2019). "],["glossary.html", "A Glossary", " A Glossary Abandonware FIXME Absolute error FIXME Absolute path FIXME Accuracy FIXME Action (in Make): FIXME Active listening FIXME Actual output (of a test): FIXME Actual result FIXME Aggregate FIXME Agile development FIXME Ally FIXME Analysis and estimation FIXME Annotated tag (in version control): FIXME Append mode FIXME Application Programming Interface (API): FIXME Assertion FIXME Authentic task A task which contains important elements of things that learners would do in real (non-classroom situations). To be authentic, a task should require learners to construct their own answers rather than choose between provided answers, and to work with the same tools and data they would use in real life. Auto-completion FIXME Automatic variable FIXME Automatic variable (in Make): FIXME Backlog FIXME Bash FIXME Beeswarm plot FIXME Binary code FIXME Bit rot FIXME Boilerplate FIXME Branch FIXME Branch-per-feature workflow FIXME https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow Breakpoint FIXME Buffer FIXME Bug report FIXME Bug tracker FIXME Build tool FIXME Build tool FIXME https://en.wikipedia.org/wiki/List_of_build_automation_software Byte code FIXME Call stack FIXME Camel case FIXME Catch (an exception): FIXME Checking-driven development (CDD): FIXME Checklist FIXME Code browser FIXME Code coverage FIXME Code review FIXME Cognitive load FIXME Comma-separated values (CSV): FIXME Command argument FIXME Command flag FIXME Command history FIXME Command option FIXME Command shell FIXME Command switch FIXME Command-line interface (CLI): FIXME Comment FIXME Commit FIXME: define both noun and verb. Commit hash FIXME Commit message FIXME Commons FIXME Competent practitioner Someone who can do normal tasks with normal effort under normal circumstances. See also novice and expert. Compiled language FIXME Compiler FIXME Computational competence FIXME Computational notebook FIXME Computational stylometry FIXME Computational thinking FIXME Conditional expression FIXME Configuration object FIXME Confirmation bias FIXME Context manager FIXME Continuation prompt FIXME Continuous integration FIXME Corpus FIXME Coverage FIXME Creative Commons - Attribution License (CC-BY): FIXME Curb cuts https://medium.com/@mosaicofminds/the-curb-cut-effect-how-making-public-spaces-accessible-to-people-with-disabilities-helps-everyone-d69f24c58785 Current working directory FIXME DRY (Don’t Repeat Yourself) The general principle when programming that it’s typically better to define something (a function, a constant…) once and refer to it consistently as a “single source of truth” throughout a piece of software than to define copies in multiple places, if only because then you only have to make any changes in one place. This is useful and helpful principle but should not be thought of as an involate rule. Data engineering FIXME Data package FIXME Declarative programming FIXME Default target FIXME Default target (in Make): FIXME Delimiter FIXME Dependency graph FIXME Design pattern FIXME Design patterns FIXME Destructuring FIXME Dictionary FIXME Digital Object Identifier (DOI): FIXME Directory Tree If the nesting relationships between directories in a filesystem are drawn as arrows from the containing directory to the nested ones, a tree structure develops. Directory A folder in a filesystem. Disk Disk refers to disk storage, a physical component of a computer that stores information on a disk. The most common kind of disk storage is a hard disk drive, which is a storage drive with a non-removable disk. Docstring FIXME Documentation generator FIXME Downvote FIXME Embedded documentation FIXME Eniac FIXME Environment FIXME Error (result from a unit test): FIXME Escape sequence FIXME Exception FIXME Exit status FIXME Expected output (of a test): FIXME Expected result FIXME Expert Someone who can diagnose and handle unusual situations, knows when the usual rules do not apply, and tends to recognize solutions rather than reasoning to them. See also competent practitioner and novice. Exploratory programming FIXME Exponent FIXME Export a variable FIXME External error FIXME Failure (result from a unit test): FIXME False beginner Someone who has studied a language before but is learning it again. False beginners start at the same point as true beginners (i.e., a pre-test will show the same proficiency) but can move much more quickly. False negative FIXME False positive FIXME Feature boxing FIXME Feature creep FIXME Feature request FIXME Filename extension FIXME Filename stem FIXME Filesystem Controls how files are stored and retrieved on disk by an operating system. Also used to refer to the disk that is used to store the files or the type of the filesystem. Filter FIXME Fixture FIXME Flag variable FIXME Flag FIXME Folder FIXME Forge FIXME Fork FIXME Format string FIXME Frequently Asked Questions (FAQ): FIXME Full identifier (in Git): FIXME Fully-qualified name FIXME Function attribute FIXME Function (in Make): FIXME GNU Public License (GPL): FIXME Git FIXME Git branch FIXME Git clone FIXME Git conflict FIXME Git fork FIXME Git merge FIXME Git pull FIXME Git push FIXME Git stage FIXME Git FIXME GitHub Pages FIXME Globbing FIXME Graphical user interface (GUI): FIXME HTTP status code FIXME Hitchhiker FIXME Home directory FIXME Governance FIXME Hot spot FIXME ISO date format FIXME Impostor syndrome FIXME In-place operator FIXME Index FIXME Install FIXME Integrated Development Environment (IDE): FIXME Internal error FIXME Interpeter FIXME Interpreted language FIXME Interruption bingo FIXME Issue tracking system FIXME Issue FIXME Iteration (in software development): FIXME JSON FIXME Jenny (a repository): FIXME Join (of database tables): FIXME Kebab case FIXME Key FIXME Label (in issue tracker): FIXME Learned helplessness FIXME Library FIXME Linter FIXME List comprehension FIXME Log file FIXME Logging framework FIXME Long option FIXME Loop body FIXME Loop (in Unix): FIXME MIT License FIXME Macro FIXME Magic number FIXME Magnitude FIXME Makefile FIXME Mantissa FIXME Martha’s Rules FIXME Maximum likelihood extimation FIXME Memory A physical device on your computer that temporarily stores information for immediate use. Mental model A simplified representation of the key elements and relationships of some problem domain that is good enough to support problem solving. Method A function that is specific to an object type, based on qualities of that type, e.g. a string method like upper() which turns characters in a string to uppercase. MIT License FIXME Namespace A way of organizing names of related objects, functions, or variables to avoid confusion with (for instance) common names that might well occur in multiple packages. Nano FIXME Ngo FIXME Not Invented Here (NIH): FIXME Novice Someone who has not yet built a usable mental model of a domain. See also competent practitioner and expert. ORCID FIXME Object An object is a programming language’s way of descrbing and storing values, usually labeled with a variable name. Object-oriented programming FIXME Open license FIXME Open science FIXME Operating system FIXME Operational test FIXME Oppression FIXME Optional argument FIXME Orthogonality FIXME Overlay configuration FIXME Overloading FIXME Package FIXME Pager FIXME Pair programming FIXME Parent directory FIXME Parking lot FIXME Path coverage FIXME Path FIXME Pattern rule FIXME Phony target FIXME Phony target FIXME Pipe (in Unix): FIXME Positional argument FIXME Post-mortem FIXME Pothole case FIXME Power law FIXME Precision FIXME Prerequisite (in Make): FIXME Privilege FIXME Procedural programming FIXME Process FIXME Product manager FIXME Project manager FIXME Prompt FIXME Provenance FIXME Pseudorandom number generator (PRNG): FIXME Public domain license (CC-0): FIXME Pull request FIXME Python FIXME Raise FIXME Raster image FIXME Rebase FIXME Recursion FIXME Redirection FIXME Refactor FIXME Refactoring FIXME Regular expression a sequence of characters that define a pattern that can be used to find matching strings Relative error FIXME Relative import In Python, the importing of a module relative to the current path and thus likely from within the current package (e.g., from . import generate) rather than an import from a globally-defined package (e.g., from zipfpy import generate). Relative path FIXME Remote login FIXME Remote repository FIXME Repl FIXME Repository FIXME Representation State Transfer (REST): FIXME Reproducible example (reprex): FIXME Reproducible research FIXME Research software engineer (RSE): FIXME Restructured Text (reST) A plain text markup language used by much Python documentation and documentation tooling. Revision FIXME Root directory FIXME Rotating file FIXME Rule (in Make): FIXME SSH key FIXME SSH protocol FIXME Scalable Vector Graphics (SVG): FIXME Script FIXME Search path FIXME Seed (for pseudorandom number generator): FIXME Semantic versioning FIXME https://semver.org/ Sense vote FIXME Set and override (pattern): FIXME Shebang FIXME Shell script FIXME Short circuit test FIXME Short identifier (in Git): FIXME Short option FIXME Side effects FIXME Sign FIXME Silent error FIXME Silent failure FIXME Snake case FIXME Software development process FIXME Source code FIXME Stand-up meeting FIXME Standard error FIXME Standard error FIXME Standard input FIXME Standard input FIXME Standard output FIXME Standard output FIXME Stop word FIXME Streaming data FIXME Sturdy development FIXME Subcommand FIXME Subdirectory FIXME Subsampling FIXME Success (result from a unit test): FIXME Sustainability FIXME Sustainable software FIXME Symbolic debugger FIXME Syntax highlighting FIXME Synthetic data FIXME Tab completion FIXME Tag (in version control): FIXME Tag FIXME Target FIXME Target (in Make): FIXME Target (of oppression): FIXME Technical debt FIXME Ternary expression FIXME Test coverage FIXME Test framework FIXME Test isolation FIXME Test runner FIXME Test-driven development FIXME Three stickies FIXME Ticket FIXME Ticketing system FIXME Tidy data As defined in Wickham (2014), tabular data is tidy if (1) each variable is in one column, (2) each different observation of that variable is in a different row, (3) there is one table for each kind of variable, and (4) if there are multiple tables, each includes a key so that related data can be linked. Time boxing FIXME Timestamp (on a file): FIXME Tldr FIXME Tolerance FIXME Transitive dependency FIXME Triage FIXME Tuning FIXME Tuple FIXME Typesetting language FIXME Unit test FIXME Unix shell FIXME Update operator See in-place operator. Upvote FIXME Validation FIXME Variable (in Python): A symbolic name that reserves memory to store a value. Variable (in Make): FIXME Vector image FIXME Verification FIXME Version control system FIXME Violin plot FIXME Virtual environment In Python, the virtualenv package allows you to create virtual, disposable, Python software environments containing only the packages and versions of packages you want to use for a particular project or task, and to install new packages into the environment without affecting other virtual environments or the system-wide default environment. Virtual machine A program that pretends to be a computer. This may seem a bit redundant, but VMs are quick to create and start up, and changes made inside the virtual machine are contained within that VM so we can install new packages or run a completely different operating system without affecting the underlying computer. What You See Is What You Get (WYSIWYG): FIXME Whitespace FIXME Wildcard FIXME Working directory FIXME Working memory FIXME Wrap code FIXME Wrapper FIXME YAML FIXME "],["references.html", "References", " References "]]
